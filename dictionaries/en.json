{
  "top": {
    "title": "Divide strings and arrays with ease",
    "description": "A lightweight utility library for dividing strings and arrays in multiple ways",
    "installation": {
      "title": "Installation"
    },
    "usage": {
      "title": "Usage",
      "examples": "Examples"
    },
    "features": {
      "title": "Features",
      "stringDivision": {
        "title": "String Division",
        "description": "Divide strings by index positions or character delimiters with a simple API."
      },
      "arrayProcessing": {
        "title": "Array Processing",
        "description": "Process arrays of strings with the same intuitive interface."
      },
      "nestedArray": {
        "title": "Nested Array",
        "description": "Handle complex data structures with support for nested arrays."
      },
      "flexibleOutput": {
        "title": "Flexible Output",
        "description": "Get results as arrays or use destructuring for individual variables."
      },
      "flatteningOption": {
        "title": "Flattening Option",
        "description": "Simplify results with the flatten option to get a single-level array."
      },
      "mixedDelimiters": {
        "title": "Mixed Delimiters",
        "description": "Combine index positions and character delimiters in the same operation."
      }
    },
    "api": {
      "title": "API Reference",
      "description": {
        "divider": "Returns an string array or nested string array of divided strings or arrays.",
        "dividerFirst": "Returns the first part of the divided string.",
        "dividerLast": "Returns the last part of the divided string.",
        "dividerLoop": "Divides the input into equal-sized chunks by the given number. Useful for fixed-width slicing.",
        "dividerNumberString": "Divides inputs number and string."
      },
      "optionsDoc": {
        "title": "üéØ General Options",
        "columns": {
          "option": "Option",
          "type": "Type",
          "default": "Default",
          "description": "Description"
        },
        "rows": [
          {
            "option": "`flatten`",
            "type": "`boolean`",
            "default": "`false`",
            "description": "If `true`, the resulting nested arrays are flattened into a single array."
          },
          {
            "option": "`trim`",
            "type": "`boolean`",
            "default": "`false`",
            "description": "If `true`, trims whitespace from each divided segment."
          },
          {
            "option": "`preserveEmpty`",
            "type": "`boolean`",
            "default": "`false`",
            "description": "If `true`, keeps empty segments produced by the split."
          },
          {
            "option": "`exclude`",
            "type": "`'none' / 'empty' / 'whitespace'`",
            "default": "`'none'`",
            "description": "See detailed explanation below."
          }
        ],
        "preserveEmpty": {
          "heading": "`preserveEmpty` (default: `false`)",
          "description": "Keep placeholder blanks when they carry meaning (e.g., CSV cells, sparse logs, diff tooling).",
          "note": "Combine with `exclude` to filter later in the pipeline."
        }
      },
      "function": {
        "parameters": {
          "title": "Parameters",
          "input": "String or array to divide",
          "dividers": "Numbers (index positions) or strings (character delimiters)",
          "options": "Optional configuration object",
          "size": "The size (number of characters) for each chunk. Must be a positive integer."
        },
        "options": {
          "title": "Options",
          "flatten": "Boolean - When true, flattens the result into a single array",
          "preserveEmpty": "Boolean - When true, keeps empty segments produced by the split",
          "trim": "Boolean - When true, trims whitespace from each divided segment",
          "exclude": "`'none' | 'empty' | 'whitespace'` - How to exclude empty segments and whitespaces from the result",
          "startOffset": "Number - Starting index offset when dividing into chunks (only for `dividerLoop`)",
          "maxChunks": "Number - Maximum number of chunks allowed. Extra chunks are joined into the last chunk"
        }
      },
      "fullReferenceLinkText": "View full API documentation on GitHub Pages"
    },
    "button": {
      "playground": "Playground"
    },
    "presets": {
      "title": "Presets",
      "description": "Common real-world splitters built on top of `divider`.",
      "email": {
        "title": "emailDivider()",
        "description": "Divide an email into local and domain parts, with optional TLD split.",
        "example": ""
      },
      "csv": {
        "title": "csvDivider()",
        "description": "CSV-aware divide with quoted field support, custom delimiter/quote, and trimming."
      },
      "path": {
        "title": "pathDivider()",
        "description": "Divide file paths by `/` or `|`, with options to trim or keep empty segments."
      }
    }
  },
  "playground": {
    "title": "Playground",
    "description": "Test the library in a live environment.",
    "string": {
      "placeholder": "Enter string..."
    },
    "array": {
      "placeholder": "Enter strings, one per line..."
    },
    "separator": {
      "description": "Enter one separator per line.\nExample:\n,\n \n2"
    },
    "output": {
      "title": "Output"
    },
    "button": {
      "run": "Run",
      "back": "‚Üê Back"
    }
  }
}
